-- Missed Call Converter: Call lifecycle and outreach tracking tables
-- Idempotent creation for production safety

CREATE TABLE IF NOT EXISTS call_lifecycle (
  call_sid TEXT PRIMARY KEY,
  from_number TEXT,
  to_number TEXT,
  direction TEXT,
  status TEXT,
  start_time TIMESTAMPTZ,
  end_time TIMESTAMPTZ,
  talk_seconds INTEGER DEFAULT 0,
  meta JSONB DEFAULT '{}'::JSONB,
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS outreach_events (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  call_sid TEXT REFERENCES call_lifecycle(call_sid) ON DELETE CASCADE,
  channel TEXT NOT NULL,           -- 'whatsapp' | 'sms'
  status TEXT NOT NULL,            -- 'queued' | 'sent' | 'failed'
  dedupe_key TEXT,                 -- prevent spam within window
  payload JSONB DEFAULT '{}'::JSONB,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Unique index for deduplication
CREATE UNIQUE INDEX IF NOT EXISTS outreach_dedupe_idx ON outreach_events (call_sid, channel, dedupe_key);

-- Index for quick lookups
CREATE INDEX IF NOT EXISTS call_lifecycle_status_idx ON call_lifecycle (status);
CREATE INDEX IF NOT EXISTS outreach_events_created_at_idx ON outreach_events (created_at);

-- RLS policies for security
ALTER TABLE call_lifecycle ENABLE ROW LEVEL SECURITY;
ALTER TABLE outreach_events ENABLE ROW LEVEL SECURITY;

-- Drop existing policies if they exist and recreate
DROP POLICY IF EXISTS "Service role can manage call lifecycle" ON call_lifecycle;
DROP POLICY IF EXISTS "Service role can manage outreach events" ON outreach_events;

-- Allow service role full access
CREATE POLICY "Service role can manage call lifecycle" 
ON call_lifecycle FOR ALL 
USING (auth.role() = 'service_role'::text);

CREATE POLICY "Service role can manage outreach events" 
ON outreach_events FOR ALL 
USING (auth.role() = 'service_role'::text);