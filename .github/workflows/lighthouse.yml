name: Lighthouse CI

on: 
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  lhci:
    name: Lighthouse CI
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Start HTTP server
        run: |
          npx http-server dist -p 4173 &
          sleep 3
          
      - name: Run Lighthouse CI
        run: |
          npx @lhci/cli autorun \
            --collect.url=http://localhost:4173 \
            --assert.assertions.performance>=0.90 \
            --assert.assertions.accessibility>=1.00 \
            --assert.assertions.best-practices>=0.90 \
            --assert.assertions.seo>=0.90 \
            --assert.assertions.max-potential-fid<=200 \
            --upload.target=temporary-public-storage \
            --budget.path=./lighthouse-budget.json
        
      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('.lighthouseci/assertion-results.json')) {
              const results = JSON.parse(fs.readFileSync('.lighthouseci/assertion-results.json', 'utf8'));
              const comment = `## 🚀 Lighthouse CI Results
              
              **Performance**: ${results.performance ? '✅' : '❌'} 
              **Accessibility**: ${results.accessibility ? '✅' : '❌'}
              **Best Practices**: ${results['best-practices'] ? '✅' : '❌'}
              **SEO**: ${results.seo ? '✅' : '❌'}
              
              View full report: [Lighthouse Results](${process.env.LHCI_BUILD_URL || 'Check console output'})`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }