# .github/workflows/web-ci.yml
name: ci/build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

concurrency:
  group: web-ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  web:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.11.1"

      - name: Install deps
        run: npm ci --no-audit --no-fund

      - name: Sanitize package.json (remove lifecycle/cap hooks)
        shell: bash
        run: |
          node --input-type=module -e "
            import fs from 'fs';
            const p = JSON.parse(fs.readFileSync('package.json','utf8'));
            p.scripts = p.scripts || {};
            for (const k of ['prebuild','postbuild','capacitor:sync:before','capacitor:sync:after']) {
              if (p.scripts[k]) delete p.scripts[k];
            }
            fs.writeFileSync('package.json', JSON.stringify(p, null, 2));
          "

      - name: Verify built assets
        run: |
          NPM_CONFIG_IGNORE_SCRIPTS=true npm run build
          node scripts/verify-app.cjs

      - name: Upload dist artifact
        uses: actions/upload-artifact@v4
        with:
          name: web-dist
          path: |
            dist/**
            !**/node_modules/**
  ios:
    name: ios/build
    runs-on: macos-14
    timeout-minutes: 45
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.11.1"

      - name: Install dependencies
        run: npm ci --no-audit --no-fund

      - name: Build web bundle for native sync
        run: NPM_CONFIG_IGNORE_SCRIPTS=true npm run build

      - name: Sync Capacitor iOS project
        run: npx cap sync ios

      - name: Patch iOS Info.plist
        shell: bash
        env:
          BUNDLE_ID: com.apex.tradeline
          APP_NAME: TradeLine 24/7
          MARKETING_VERSION: 1.0.0
          BUILD_NUMBER: 1
        run: |
          set -euo pipefail
          PLIST="ios/App/App/Info.plist"
          if [ ! -f "$PLIST" ]; then echo "❌ Info.plist not found at $PLIST"; exit 1; fi
          set_plist () {
            local key="$1"; local type="$2"; shift 2; local value="$*"
            if /usr/libexec/PlistBuddy -c "Print :$key" "$PLIST" >/dev/null 2>&1; then
              /usr/libexec/PlistBuddy -c "Set :$key $value" "$PLIST"
            else
              /usr/libexec/PlistBuddy -c "Add :$key $type $value" "$PLIST"
            fi
          }
          echo "🔧 Patching $PLIST"
          set_plist CFBundleIdentifier string "$BUNDLE_ID"
          set_plist CFBundleDisplayName string "$APP_NAME"
          set_plist CFBundleName string "$APP_NAME"
          set_plist CFBundleShortVersionString string "$MARKETING_VERSION"
          set_plist CFBundleVersion string "$BUILD_NUMBER"
          echo "✅ CFBundleIdentifier: $(/usr/libexec/PlistBuddy -c 'Print :CFBundleIdentifier' "$PLIST")"
          echo "✅ CFBundleShortVersionString: $(/usr/libexec/PlistBuddy -c 'Print :CFBundleShortVersionString' "$PLIST")"
          echo "✅ CFBundleVersion: $(/usr/libexec/PlistBuddy -c 'Print :CFBundleVersion' "$PLIST")"

      - name: Install CocoaPods
        working-directory: ios/App
        run: pod install

      - name: Build iOS workspace
        shell: bash
        env:
          # Safe, explicit values (simulator build; no signing)
          CONFIGURATION: Release
          SCHEME: App
          WORKSPACE: ios/App/App.xcworkspace
          DESTINATION: 'platform=iOS Simulator,name=iPhone 15,OS=latest'
        run: |
          set -euo pipefail

          echo "🔎 Xcode version:"
          xcodebuild -version

          echo "🔎 List schemes:"
          xcodebuild -list -workspace "$WORKSPACE" || true

          echo "🔎 Show build settings (first pass):"
          xcodebuild -showBuildSettings -workspace "$WORKSPACE" -scheme "$SCHEME" | sed -n '1,120p' || true

          # Clean first, then build for SIMULATOR. No signing. Explicit overrides remove common 65s.
          set -o pipefail
          xcodebuild \
            -workspace "$WORKSPACE" \
            -scheme "$SCHEME" \
            -configuration "$CONFIGURATION" \
            -destination "$DESTINATION" \
            -sdk iphonesimulator \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_IDENTITY="" \
            PRODUCT_BUNDLE_IDENTIFIER=com.apex.tradeline \
            MARKETING_VERSION=${MARKETING_VERSION:-1.0.0} \
            CURRENT_PROJECT_VERSION=${BUILD_NUMBER:-1} \
            ONLY_ACTIVE_ARCH=NO \
            | tee xcodebuild.log

      - name: Upload xcodebuild log (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xcodebuild-log
          path: xcodebuild.log

      - name: Tail xcodebuild log on failure
        if: failure()
        run: |
          echo "----- LAST 300 LINES -----"
          tail -n 300 xcodebuild.log || true
