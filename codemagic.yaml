workflows:
  ios_capacitor_testflight:
    name: iOS Capacitor ‚Üí TestFlight
    instance_type: mac_mini_m2
    max_build_duration: 60

    integrations:
      # This must exactly match the name you see in Codemagic > Integrations
      app_store_connect: APEX Business Systems

    environment:
      xcode: 15.4
      vars:
        TEAM_ID: "NWGUYF42KW"
        BUNDLE_ID: "com.apex.tradeline"

    cache:
      cache_paths:
        - ~/.npm
        - ~/Library/Caches/CocoaPods

    scripts:
      - name: Install deps & build web
        script: |
          set -euo pipefail
          npm ci
          npm run build

      - name: Ensure iOS platform (idempotent + self-heal)
        script: |
          set -euo pipefail
          ROOT_IOS_DIR="ios"
          PROJECT_DIR="ios/App"
          XCPROJ="$PROJECT_DIR/App.xcodeproj"
          XCWORK="$PROJECT_DIR/App.xcworkspace"

          have_workspace=false
          if [ -d "$XCWORK" ] || [ -d "$XCPROJ" ]; then
            have_workspace=true
          fi

          if $have_workspace; then
            echo "‚úÖ Found Xcode project/workspace ‚Äî skipping 'cap add ios'"
          else
            if [ -d "$ROOT_IOS_DIR" ]; then
              echo "‚ö†Ô∏è  Found 'ios/' but no Xcode project ‚Äî cleaning stale native folder"
              rm -rf "$ROOT_IOS_DIR"
            fi
            echo "üÜï Adding iOS platform fresh‚Ä¶"
            npm i -D @capacitor/ios
            npx cap add ios
          fi


      - name: Sync iOS & CocoaPods (fast)
        script: |
          set -euo pipefail
          npx cap sync ios
          cd ios/App
          command -v pod >/dev/null 2>&1 || sudo gem install cocoapods --no-document
          pod repo update || true
          pod install --repo-update
          test -d App.xcworkspace || { echo "‚ùå CocoaPods didn't produce App.xcworkspace"; exit 1; }

      - name: Set iOS build number from Codemagic
        script: |
          set -euo pipefail
          IOS_BUILD_NUM="${PROJECT_BUILD_NUMBER:-1}"
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion ${IOS_BUILD_NUM}" ios/App/App/Info.plist || true
          echo "‚ÑπÔ∏è  CFBundleVersion = ${IOS_BUILD_NUM}"

      - name: Install signing certs & provisioning profiles (ASC integration)
        script: |
          set -euo pipefail
          # 1) Initialize keychain
          keychain initialize

          # 2) Fetch signing files for the App Store (creates if missing)
          app-store-connect fetch-signing-files \
            --type IOS_APP_STORE \
            --bundle-id "$BUNDLE_ID" \
            --create

          # 3) Import all fetched certs
          keychain add-certificates

          # 4) Apply matching profiles to each target (manual signing)
          xcode-project use-profiles --project "ios/App/App.xcodeproj"

          echo "üîé Codesigning identities:"
          security find-identity -v -p codesigning || true
          echo "üîé Installed profiles:"
          ls -1 ~/Library/MobileDevice/Provisioning\ Profiles || true

      - name: Xcode archive (manual signing via applied profiles)
        script: |
          set -euo pipefail
          xcodebuild -workspace "ios/App/App.xcworkspace" \
            -scheme "App" \
            -configuration Release \
            -sdk iphoneos \
            -destination "generic/platform=iOS" \
            -archivePath "$CM_BUILD_DIR/App.xcarchive" \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM="$TEAM_ID" \
            PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
            -quiet \
            clean archive

      - name: Export IPA (App Store)
        script: |
          set -euo pipefail
          # Grab the name of the profile that matches our bundle id
          PROFILE_NAME=$(grep -H -A1 -r "<key>Name</key>" ~/Library/MobileDevice/Provisioning\ Profiles \
            | sed -n "N;s/.*Name.*\n.*<string>\(.*\)<\/string>.*/\1/p" | head -n1)

          cat > exportOptions.plist <<PLIST
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0"><dict>
            <key>method</key><string>app-store</string>
            <key>teamID</key><string>${TEAM_ID}</string>
            <key>provisioningProfiles</key><dict>
              <key>${BUNDLE_ID}</key><string>${PROFILE_NAME}</string>
            </dict>
            <key>stripSwiftSymbols</key><true/>
            <key>compileBitcode</key><false/>
          </dict></plist>
          PLIST

          xcodebuild -exportArchive \
            -archivePath "$CM_BUILD_DIR/App.xcarchive" \
            -exportOptionsPlist exportOptions.plist \
            -exportPath "$CM_BUILD_DIR/export"

    artifacts:
      - $CM_BUILD_DIR/export/*.ipa
      - $CM_BUILD_DIR/App.xcarchive

    publishing:
      app_store_connect:
        auth: integration
        submit_to_testflight: true
        # beta_groups:
        #   - Internal Testers
