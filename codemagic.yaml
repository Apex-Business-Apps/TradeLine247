workflows:
ios_capacitor_testflight:
name: iOS - Capacitor -> TestFlight (single run)
instance_type: mac_mini_m2
max_build_duration: 60

integrations:
  app_store_connect: Created via API

environment:
  groups:
    - ios_config
  ios_signing:
    distribution_type: app_store
    bundle_identifier: $BUNDLE_ID
  vars:
    APP_VERSION: "1.0.0"
    APP_BUILD: "1"
    XCODE_WORKSPACE: "ios/App/App.xcworkspace"
    XCODE_SCHEME: "App"
  xcode: latest
  node: 20.11.1
  npm: 10
  cocoapods: default

cache:
  cache_paths:
    - ~/.npm
    - ~/.cocoapods
    - ios/Pods

scripts:
  - name: Sanitize package.json (remove npm/Capacitor hooks)
    script: |
      node --input-type=module -e "
        import fs from 'fs';
        const p = JSON.parse(fs.readFileSync('package.json','utf8'));
        p.scripts = p.scripts || {};
        for (const k of ['prebuild','postbuild','capacitor:sync:before','capacitor:sync:after']) {
          if (p.scripts[k]) delete p.scripts[k];
        }
        fs.writeFileSync('package.json', JSON.stringify(p, null, 2));
      "

  - name: Resolve version/build
    script: |
      APP_BUILD="$(date +%y%m%d%H)"
      echo "APP_BUILD=$APP_BUILD" | tee -a "$CM_ENV"

  - name: Install deps
    script: |
      npm ci --no-audit --no-fund

  - name: Build web (ignore lifecycle hooks)
    script: |
      NPM_CONFIG_IGNORE_SCRIPTS=true npm run build

  - name: Verify built assets (after build)
    script: |
      node scripts/verify-app.cjs
      node scripts/verify_icons.mjs

  - name: Sync Capacitor iOS
    script: |
      npx cap sync ios

  - name: Raise iOS deployment target to 15.0 (project + Podfile)
    script: |
      sed -i '' -E "s/IPHONEOS_DEPLOYMENT_TARGET = [0-9.]+;/IPHONEOS_DEPLOYMENT_TARGET = 15.0;/g" ios/App/App.xcodeproj/project.pbxproj
      if grep -q "platform :ios" ios/App/Podfile; then
        sed -i '' -E "s/platform :ios, *'[0-9.]+'$/platform :ios, '15.0'/" ios/App/Podfile
      else
        (echo "platform :ios, '15.0'"; cat ios/App/Podfile) > ios/App/Podfile.tmp && mv ios/App/Podfile.tmp ios/App/Podfile
      fi

  - name: Install CocoaPods
    script: |
      cd ios/App
      pod install --repo-update

  - name: Set iOS Info.plist versions + iPhone-only device family
    script: |
      PLIST="ios/App/App/Info.plist"
      /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString ${APP_VERSION}" "$PLIST"
      /usr/libexec/PlistBuddy -c "Set :CFBundleVersion ${APP_BUILD}" "$PLIST"
      /usr/libexec/PlistBuddy -c "Delete :UIDeviceFamily" "$PLIST" || true
      /usr/libexec/PlistBuddy -c "Add :UIDeviceFamily array" "$PLIST"
      /usr/libexec/PlistBuddy -c "Add :UIDeviceFamily:0 integer 1" "$PLIST"

  - name: Initialize keychain and add certificates
    script: |
      keychain initialize
      keychain add-certificates

  - name: Apply provisioning profiles
    script: |
      xcode-project use-profiles

  - name: Capacitor copy iOS (force + guards)
    script: |
      npx cap copy ios
      [ -f ios/App/App/capacitor.config.json ] || { echo "ERROR: Missing ios/App/App/capacitor.config.json"; exit 1; }
      [ -d ios/App/App/public ] || { echo "ERROR: Missing ios/App/App/public (web assets)"; exit 1; }

  - name: Prepare App Icons (flatten alpha, verify sizes, iPhone only)
    script: |
      set -e
      SRC="public/assets/brand/App_Icons/ios"
      AC="ios/App/App/Assets.xcassets/AppIcon.appiconset"
      APPSTORE="$SRC/AppStore1024.png"
      PHONE180="$SRC/iPhoneApp180.png"
      SPOT120="$SRC/iPhoneSpotlight120.png"
      for f in "$APPSTORE" "$PHONE180" "$SPOT120"; do
        [ -f "$f" ] || { echo "ERROR: $f not found"; exit 1; }
      done
      mkdir -p "$AC"
      ensure_opaque () {
        in="$1"; out="$2"
        if command -v convert >/dev/null 2>&1; then
          convert "$in" -background white -alpha remove -alpha off "$out"
        else
          # Fallback: reencode to PNG with sips (will keep opaque if already opaque)
          /usr/bin/sips -s format png "$in" --out "$out" >/dev/null
        fi
      }
      size_check () {
        file="$1"; need="$2"
        W=$(/usr/bin/sips -g pixelWidth "$file" 2>/dev/null | awk '/pixelWidth/ {print $2}')
        H=$(/usr/bin/sips -g pixelHeight "$file" 2>/dev/null | awk '/pixelHeight/ {print $2}')
        [ "$W"x = "$need"x ] && [ "$H"x = "$need"x ] || { echo "ERROR: $file must be ${need}x${need}"; exit 1; }
      }
      ensure_opaque "$APPSTORE" "$AC/AppStore1024.png"
      ensure_opaque "$PHONE180" "$AC/iPhoneApp180.png"
      ensure_opaque "$SPOT120" "$AC/iPhoneSpotlight120.png"
      size_check "$AC/AppStore1024.png" 1024
      size_check "$AC/iPhoneApp180.png" 180
      size_check "$AC/iPhoneSpotlight120.png" 120
      cat > "$AC/Contents.json" <<'JSON'
      {
        "images": [
          { "idiom": "iphone", "size": "60x60", "scale": "3x", "filename": "iPhoneApp180.png" },
          { "idiom": "iphone", "size": "40x40", "scale": "3x", "filename": "iPhoneSpotlight120.png" },
          { "idiom": "ios-marketing", "size": "1024x1024", "scale": "1x", "filename": "AppStore1024.png" }
        ],
        "info": { "version": 1, "author": "codemagic" }
      }
      JSON

  - name: Detect App Store provisioning profile for export
    script: |
      PROFILE_DIR="$HOME/Library/MobileDevice/Provisioning Profiles"
      PROFILE_NAME=""
      for f in "$PROFILE_DIR"/*.mobileprovision; do
        [ -e "$f" ] || continue
        PLIST=$(/usr/bin/security cms -D -i "$f")
        BID=$(/usr/libexec/PlistBuddy -c "Print :Entitlements:application-identifier" /dev/stdin <<<"$PLIST" 2>/dev/null | sed "s/^[A-Z0-9]*\.//")
        HAS_DEVICES=$(/usr/libexec/PlistBuddy -c "Print :ProvisionedDevices" /dev/stdin <<<"$PLIST" 2>/dev/null && echo yes || echo no)
        ALL_DEVICES=$(/usr/libexec/PlistBuddy -c "Print :ProvisionsAllDevices" /dev/stdin <<<"$PLIST" 2>/dev/null && echo yes || echo no)
        NAME=$(/usr/libexec/PlistBuddy -c "Print :Name" /dev/stdin <<<"$PLIST" 2>/dev/null)
        if [ "$BID" = "$BUNDLE_ID" ] && [ "$HAS_DEVICES" = "no" ] && [ "$ALL_DEVICES" = "no" ]; then
          PROFILE_NAME="$NAME"; break
        fi
      done
      [ -n "$PROFILE_NAME" ] || { echo "ERROR: No App Store profile for $BUNDLE_ID"; exit 1; }
      echo "PROFILE_NAME=$PROFILE_NAME" >> "$CM_ENV"
      echo "Using profile: $PROFILE_NAME"

  - name: Xcode archive (Release)
    script: |
      xcodebuild -workspace "$XCODE_WORKSPACE" \
        -scheme "$XCODE_SCHEME" \
        -configuration Release \
        -sdk iphoneos \
        -destination "generic/platform=iOS" \
        -archivePath "$CM_BUILD_DIR/TradeLine247.xcarchive" \
        -allowProvisioningUpdates \
        clean archive

  - name: Export IPA for App Store (explicit profile)
    script: |
      cat > exportOptions.plist <<PLIST
      <?xml version="1.0" encoding="UTF-8"?>
      <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
      <plist version="1.0">
      <dict>
        <key>method</key><string>app-store</string>
        <key>teamID</key><string>${TEAM_ID}</string>
        <key>stripSwiftSymbols</key><true/>
        <key>compileBitcode</key><false/>
        <key>provisioningProfiles</key>
        <dict>
          <key>${BUNDLE_ID}</key><string>${PROFILE_NAME}</string>
        </dict>
      </dict>
      </plist>
      PLIST
      xcodebuild -exportArchive \
        -archivePath "$CM_BUILD_DIR/TradeLine247.xcarchive" \
        -exportOptionsPlist exportOptions.plist \
        -exportPath "$CM_BUILD_DIR/export"

artifacts:
  - $CM_BUILD_DIR/export/*.ipa
  - $CM_BUILD_DIR/TradeLine247.xcarchive

publishing:
  app_store_connect:
    auth: integration
    submit_to_testflight: true
