workflows:
  ios_capacitor_testflight:
    name: iOS Capacitor → TestFlight
    instance_type: mac_mini_m2
    max_build_duration: 60

    integrations:
      app_store_connect: APEX Business Systems

    environment:
      xcode: 15.4
      groups:
        - appstore_credentials        # APP_STORE_CONNECT_* live here
      vars:
        TEAM_ID: "NWGUYF42KW"
        BUNDLE_ID: "com.apex.tradeline"
        IOS_BUILD_NUM: $PROJECT_BUILD_NUMBER

    cache:
      cache_paths:
        - ~/.npm
        - ~/Library/Caches/CocoaPods

    scripts:
      - name: Install deps & build web
        script: |
          set -euo pipefail
          npm ci
          npm run build

      - name: Ensure iOS platform (idempotent)
        script: |
          set -euo pipefail
          # If ios/ exists, don't run "cap add ios" (it would error with 'already exists').
          if [ -d ios ]; then
            echo "iOS platform folder already exists — skipping 'cap add ios'"
          else
            echo "Adding iOS platform..."
            npm i -D @capacitor/ios
            npx cap add ios
          fi

      - name: Sync iOS & CocoaPods
        script: |
          set -euo pipefail
          npx cap sync ios
          cd ios/App
          command -v pod >/dev/null 2>&1 || sudo gem install cocoapods --no-document
          pod repo update || true
          pod install --repo-update
          test -d App.xcworkspace || { echo "Missing App.xcworkspace after pod install"; exit 1; }

      - name: Fetch signing files (App Store distribution)
        script: |
          set -euo pipefail
          # Correct CLI usage: bundle id is positional (no --bundle-id flag)
          app-store-connect fetch-signing-files \
            --issuer-id @env:APP_STORE_CONNECT_ISSUER_ID \
            --key-id @env:APP_STORE_CONNECT_KEY_IDENTIFIER \
            --private-key @env:APP_STORE_CONNECT_PRIVATE_KEY \
            --type IOS_APP_STORE \
            "$BUNDLE_ID"

      - name: Install certs & apply provisioning profiles
        script: |
          set -euo pipefail
          keychain initialize
          # Add any .p12 the fetch step put under Certificates
          if ls "$HOME/Library/MobileDevice/Certificates/"*.p12 >/dev/null 2>&1; then
            keychain add-certificates --certificate "$HOME/Library/MobileDevice/Certificates/"*.p12
          else
            echo "No .p12 certificates found (Apple-managed certs may already be present)"
          fi
          # Apply profiles only to our app project (avoid touching Pods)
          xcode-project use-profiles --project "ios/App/App.xcodeproj"

      - name: Set iOS build number (Info.plist)
        script: |
          set -euo pipefail
          if [ -n "${IOS_BUILD_NUM:-}" ]; then
            /usr/libexec/PlistBuddy -c "Set :CFBundleVersion ${IOS_BUILD_NUM}" ios/App/App/Info.plist || true
            echo "CFBundleVersion set to ${IOS_BUILD_NUM}"
          else
            echo "IOS_BUILD_NUM not set; skipping Info.plist patch"
          fi

      - name: Xcode archive (manual signing)
        script: |
          set -euo pipefail
          xcodebuild \
            -workspace "ios/App/App.xcworkspace" \
            -scheme "App" \
            -configuration Release \
            -sdk iphoneos \
            -destination "generic/platform=iOS" \
            -archivePath "$CM_BUILD_DIR/App.xcarchive" \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM="$TEAM_ID" \
            PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
            CURRENT_PROJECT_VERSION="${IOS_BUILD_NUM:-1}" \
            -quiet \
            clean archive

      - name: Export IPA (App Store)
        script: |
          set -euo pipefail
          # Attempt to detect a profile name for mapping (first installed profile)
          PROFILE_PATH="$(ls -1 ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision | head -n1 || true)"
          if [ -n "$PROFILE_PATH" ]; then
            PROFILE_NAME="$(/usr/libexec/PlistBuddy -c 'Print :Name' /dev/stdin <<< "$(security cms -D -i "$PROFILE_PATH")")"
          else
            echo "No provisioning profiles found in ~/Library/MobileDevice/Provisioning Profiles"
            PROFILE_NAME=""
          fi

          cat > exportOptions.plist <<PLIST
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
            <dict>
              <key>method</key><string>app-store</string>
              <key>teamID</key><string>${TEAM_ID}</string>
              <key>stripSwiftSymbols</key><true/>
              <key>compileBitcode</key><false/>
              <key>provisioningProfiles</key>
              <dict>
                <key>${BUNDLE_ID}</key><string>${PROFILE_NAME}</string>
              </dict>
            </dict>
          </plist>
          PLIST

          xcodebuild -exportArchive \
            -archivePath "$CM_BUILD_DIR/App.xcarchive" \
            -exportOptionsPlist exportOptions.plist \
            -exportPath "$CM_BUILD_DIR/export"

    artifacts:
      - $CM_BUILD_DIR/export/*.ipa
      - $CM_BUILD_DIR/App.xcarchive

    publishing:
      app_store_connect:
        auth: integration          # uses "APEX Business Systems" integration
        submit_to_testflight: true
        # beta_groups:
        #   - Internal Testers
