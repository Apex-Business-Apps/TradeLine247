workflows:
  ios_capacitor_testflight:
    name: iOS - Capacitor -> TestFlight
    instance_type: mac_mini_m2
    max_build_duration: 60

    integrations:
      app_store_connect: Created via API

    environment:
      groups:
        - ios_config
      ios_signing:
        distribution_type: app_store
        bundle_identifier: $BUNDLE_ID
      vars:
        APP_VERSION: "1.0.0"
        APP_BUILD: "1"
        XCODE_WORKSPACE: "ios/App/App.xcworkspace"
        XCODE_SCHEME: "App"
      xcode: latest
      node: 20.11.1
      npm: 10
      cocoapods: default

    cache:
      cache_paths:
        - ~/.npm
        - ~/.cocoapods
        - ios/Pods

    scripts:
      - name: Sanitize package.json (remove npm and Capacitor hooks)
        script: |
          node --input-type=module -e "
            import fs from 'fs';
            const p = JSON.parse(fs.readFileSync('package.json','utf8'));
            p.scripts = p.scripts || {};
            for (const k of ['prebuild','postbuild','capacitor:sync:before','capacitor:sync:after']) {
              if (p.scripts[k]) delete p.scripts[k];
            }
            fs.writeFileSync('package.json', JSON.stringify(p, null, 2));
          "

      - name: Resolve version and build
        script: |
          APP_BUILD="$(date +%y%m%d%H)"
          echo "APP_BUILD=$APP_BUILD" >> "$CM_ENV"
          echo "Using APP_VERSION=$APP_VERSION / APP_BUILD=$APP_BUILD"

      - name: Install deps
        script: |
          npm ci --no-audit --no-fund

      - name: Build web (ignore lifecycle hooks)
        script: |
          NPM_CONFIG_IGNORE_SCRIPTS=true npm run build

      - name: Verify built assets (after build)
        script: |
          node scripts/verify-app.cjs
          node scripts/verify_icons.mjs

      - name: Sync Capacitor iOS
        script: |
          npx cap sync ios

      - name: Raise iOS deployment target to 15.0 (project and Podfile)
        script: |
          sed -i '' -E "s/IPHONEOS_DEPLOYMENT_TARGET = [0-9.]+;/IPHONEOS_DEPLOYMENT_TARGET = 15.0;/g" ios/App/App.xcodeproj/project.pbxproj
          if grep -q "platform :ios" ios/App/Podfile; then
            sed -i '' -E "s/platform :ios, *'[0-9.]+'$/platform :ios, '15.0'/" ios/App/Podfile
          else
            (echo "platform :ios, '15.0'"; cat ios/App/Podfile) > ios/App/Podfile.tmp && mv ios/App/Podfile.tmp ios/App/Podfile
          fi

      - name: Install CocoaPods
        script: |
          cd ios/App
          pod install --repo-update

      - name: Set iOS Info.plist versions
        script: |
          /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString ${APP_VERSION}" ios/App/App/Info.plist
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion ${APP_BUILD}" ios/App/App/Info.plist

      - name: Initialize keychain and add certificates
        script: |
          keychain initialize
          keychain add-certificates

      - name: Apply provisioning profiles
        script: |
          xcode-project use-profiles

      - name: Detect App Store provisioning profile for export
        script: |
          PROFILE_DIR="$HOME/Library/MobileDevice/Provisioning Profiles"
          PROFILE_NAME=""
          set -e
          for f in "$PROFILE_DIR"/*.mobileprovision; do
            [ -e "$f" ] || continue
            PLIST=$(/usr/bin/security cms -D -i "$f")
            BID=$(/usr/libexec/PlistBuddy -c "Print :Entitlements:application-identifier" /dev/stdin <<<"$PLIST" 2>/dev/null | sed "s/^[A-Z0-9]*\.//")
            HAS_DEVICES=$(/usr/libexec/PlistBuddy -c "Print :ProvisionedDevices" /dev/stdin <<<"$PLIST" 2>/dev/null && echo yes || echo no)
            ALL_DEVICES=$(/usr/libexec/PlistBuddy -c "Print :ProvisionsAllDevices" /dev/stdin <<<"$PLIST" 2>/dev/null && echo yes || echo no)
            NAME=$(/usr/libexec/PlistBuddy -c "Print :Name" /dev/stdin <<<"$PLIST" 2>/dev/null)
            if [ "$BID" = "$BUNDLE_ID" ] && [ "$HAS_DEVICES" = "no" ] && [ "$ALL_DEVICES" = "no" ]; then
              PROFILE_NAME="$NAME"
              break
            fi
          done
          if [ -z "$PROFILE_NAME" ]; then
            echo "ERROR: No App Store provisioning profile found for $BUNDLE_ID in $PROFILE_DIR"
            exit 1
          fi
          echo "PROFILE_NAME=$PROFILE_NAME" >> "$CM_ENV"
          echo "Using provisioning profile: $PROFILE_NAME"

      - name: Capacitor copy iOS (force and guards)
        script: |
          npx cap copy ios
          if [ ! -f ios/App/App/capacitor.config.json ]; then
            echo "ERROR: Missing ios/App/App/capacitor.config.json"
            exit 1
          fi
          if [ ! -d ios/App/App/public ]; then
            echo "ERROR: Missing ios/App/App/public (web assets)"
            exit 1
          fi

      - name: Limit device family to iPhone
        script: |
          PLIST="ios/App/App/Info.plist"
          if /usr/libexec/PlistBuddy -c "Print :UIDeviceFamily" "$PLIST" >/dev/null 2>&1; then
            /usr/libexec/PlistBuddy -c "Delete :UIDeviceFamily" "$PLIST" || true
          fi
          /usr/libexec/PlistBuddy -c "Add :UIDeviceFamily array" "$PLIST"
          /usr/libexec/PlistBuddy -c "Add :UIDeviceFamily:0 integer 1" "$PLIST"

      - name: Prepare App Icons from repo (auto-flatten, verify, write asset catalog)
        script: |
          set -euo pipefail
          ICON_DIR="public/assets/brand/App_Icons/ios"
          ICONSET="ios/App/App/Assets.xcassets/AppIcon.appiconset"
          mkdir -p "$ICONSET"
          SRC1024="$ICON_DIR/AppStore1024.png"
          SRC120="$ICON_DIR/iPhoneSpotlight120.png"
          SRC180="$ICON_DIR/iPhoneApp180.png"
          for f in "$SRC1024" "$SRC120" "$SRC180"; do
            [ -f "$f" ] || { echo "ERROR: Missing $f"; exit 1; }
          done
          python3 - <<'PY' >/dev/null 2>&1 || pip3 install --user Pillow >/dev/null
          PY
          python3 - <<'PY'
import os
from PIL import Image

ICON_DIR = "public/assets/brand/App_Icons/ios"
ICONSET  = "ios/App/App/Assets.xcassets/AppIcon.appiconset"

SRC1024 = os.path.join(ICON_DIR, "AppStore1024.png")
SRC120  = os.path.join(ICON_DIR, "iPhoneSpotlight120.png")
SRC180  = os.path.join(ICON_DIR, "iPhoneApp180.png")

def flatten(src, size, hex_color="#F26722"):
    img = Image.open(src).convert("RGBA")
    bg  = Image.new("RGBA", img.size, hex_color)
    out = Image.alpha_composite(bg, img).convert("RGB").resize(size, Image.LANCZOS)
    return out

os.makedirs(ICONSET, exist_ok=True)
out1024 = flatten(SRC1024, (1024,1024)); out1024.save(os.path.join(ICONSET,"ItunesArtwork-1024.png"), "PNG")
out180  = flatten(SRC180,  (180,180));   out180.save(os.path.join(ICONSET,"Icon-App-60x60@3x.png"), "PNG")
out120  = flatten(SRC120,  (120,120));   out120.save(os.path.join(ICONSET,"Icon-App-60x60@2x.png"), "PNG")

open(os.path.join(ICONSET,"Contents.json"),"w").write(
"""{
  "images": [
    { "size": "60x60", "idiom": "iphone", "filename": "Icon-App-60x60@2x.png", "scale": "2x" },
    { "size": "60x60", "idiom": "iphone", "filename": "Icon-App-60x60@3x.png", "scale": "3x" }
  ],
  "info": { "version": 1, "author": "xcode" }
}
""")
PY
          ls -la "$ICONSET"

      - name: Xcode archive (Release)
        script: |
          xcodebuild -workspace "$XCODE_WORKSPACE" \
            -scheme "$XCODE_SCHEME" \
            -configuration Release \
            -sdk iphoneos \
            -destination "generic/platform=iOS" \
            -archivePath "$CM_BUILD_DIR/TradeLine247.xcarchive" \
            -allowProvisioningUpdates \
            clean archive

      - name: Export IPA for App Store (explicit profile)
        script: |
          cat > exportOptions.plist <<PLIST
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key><string>app-store</string>
            <key>teamID</key><string>${TEAM_ID}</string>
            <key>stripSwiftSymbols</key><true/>
            <key>compileBitcode</key><false/>
            <key>provisioningProfiles</key>
            <dict>
              <key>${BUNDLE_ID}</key><string>${PROFILE_NAME}</string>
            </dict>
          </dict>
          </plist>
          PLIST
          xcodebuild -exportArchive \
            -archivePath "$CM_BUILD_DIR/TradeLine247.xcarchive" \
            -exportOptionsPlist exportOptions.plist \
            -exportPath "$CM_BUILD_DIR/export"

    artifacts:
      - $CM_BUILD_DIR/export/*.ipa
      - $CM_BUILD_DIR/TradeLine247.xcarchive

    publishing:
      app_store_connect:
        auth: integration
        submit_to_testflight: true
