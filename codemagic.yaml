integrations:
  app_store_connect: Created via API

environment:
  groups:
    - ios_config
  ios_signing:
    distribution_type: app_store
    bundle_identifier: $BUNDLE_ID
  vars:
    APP_VERSION: "1.0.0"
    APP_BUILD: "1"
    XCODE_WORKSPACE: "ios/App/App.xcworkspace"
    XCODE_SCHEME: "App"
  xcode: latest
  node: 20.11.1
  npm: 10
  cocoapods: default

cache:
  cache_paths:
    - ~/.npm
    - ~/.cocoapods
    - ios/Pods

scripts:
  - name: Sanitize package.json (remove npm/Capacitor hooks)
    script: |
      set -euo pipefail
      node --input-type=module -e "
        import fs from 'fs';
        const p = JSON.parse(fs.readFileSync('package.json','utf8'));
        p.scripts = p.scripts || {};
        for (const k of ['prebuild','postbuild','capacitor:sync:before','capacitor:sync:after']) {
          if (p.scripts[k]) delete p.scripts[k];
        }
        fs.writeFileSync('package.json', JSON.stringify(p, null, 2));
      "
      echo "Sanitized package.json scripts."

  - name: Resolve version/build
    script: |
      set -euo pipefail
      APP_BUILD="$(date +%y%m%d%H)"
      echo "APP_BUILD=$APP_BUILD" >> "$CM_ENV"
      echo "Using APP_VERSION=$APP_VERSION / APP_BUILD=$APP_BUILD"

  - name: Install deps
    script: |
      set -euo pipefail
      npm ci --no-audit --no-fund

  - name: Build web (ignore lifecycle hooks)
    script: |
      set -euo pipefail
      NPM_CONFIG_IGNORE_SCRIPTS=true npm run build

  - name: Verify built assets (after build)
    script: |
      set -euo pipefail
      node scripts/verify-app.cjs
      node scripts/verify_icons.mjs

  - name: Sync Capacitor iOS
    script: |
      set -euo pipefail
      npx cap sync ios

  - name: Raise iOS deployment target to 15.0 (project + Podfile)
    script: |
      set -euo pipefail
      sed -i '' -E "s/IPHONEOS_DEPLOYMENT_TARGET = [0-9.]+;/IPHONEOS_DEPLOYMENT_TARGET = 15.0;/g" ios/App/App.xcodeproj/project.pbxproj
      if grep -q "platform :ios" ios/App/Podfile; then
        sed -i '' -E "s/platform :ios, *'[0-9.]+'$/platform :ios, '15.0'/" ios/App/Podfile
      else
        (echo "platform :ios, '15.0'"; cat ios/App/Podfile) > ios/App/Podfile.tmp && mv ios/App/Podfile.tmp ios/App/Podfile
      fi

  - name: Install CocoaPods
    script: |
      set -euo pipefail
      cd ios/App
      pod install --repo-update

  - name: Set iOS Info.plist versions + iPhone-only device family
    script: |
      set -euo pipefail
      PLIST="ios/App/App/Info.plist"
      /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString ${APP_VERSION}" "$PLIST"
      /usr/libexec/PlistBuddy -c "Set :CFBundleVersion ${APP_BUILD}" "$PLIST"
      /usr/libexec/PlistBuddy -c "Delete :UIDeviceFamily" "$PLIST" || true
      /usr/libexec/PlistBuddy -c "Add :UIDeviceFamily array" "$PLIST"
      /usr/libexec/PlistBuddy -c "Add :UIDeviceFamily:0 integer 1" "$PLIST"   # iPhone only

  - name: Initialize keychain and add certificates
    script: |
      set -euo pipefail
      keychain initialize
      keychain add-certificates

  - name: Apply provisioning profiles
    script: |
      set -euo pipefail
      xcode-project use-profiles

  - name: Detect App Store provisioning profile for export
    script: |
      set -euo pipefail
      PROFILE_DIR="$HOME/Library/MobileDevice/Provisioning Profiles"
      PROFILE_NAME=""
      for f in "$PROFILE_DIR"/*.mobileprovision; do
        [ -e "$f" ] || continue
        PLIST=$(/usr/bin/security cms -D -i "$f")
        BID=$(/usr/libexec/PlistBuddy -c "Print :Entitlements:application-identifier" /dev/stdin <<<"$PLIST" 2>/dev/null | sed "s/^[A-Z0-9]*\.//")
        HAS_DEVICES=$(/usr/libexec/PlistBuddy -c "Print :ProvisionedDevices" /dev/stdin <<<"$PLIST" 2>/dev/null && echo yes || echo no)
        ALL_DEVICES=$(/usr/libexec/PlistBuddy -c "Print :ProvisionsAllDevices" /dev/stdin <<<"$PLIST" 2>/dev/null && echo yes || echo no)
        NAME=$(/usr/libexec/PlistBuddy -c "Print :Name" /dev/stdin <<<"$PLIST" 2>/dev/null)
        if [ "$BID" = "$BUNDLE_ID" ] && [ "$HAS_DEVICES" = "no" ] && [ "$ALL_DEVICES" = "no" ]; then
          PROFILE_NAME="$NAME"
          break
        fi
      done
      if [ -z "$PROFILE_NAME" ]; then
        echo "ERROR: No App Store provisioning profile found for $BUNDLE_ID in $PROFILE_DIR"
        exit 1
      fi
      echo "PROFILE_NAME=$PROFILE_NAME" >> "$CM_ENV"
      echo "Using provisioning profile: $PROFILE_NAME"

  - name: Capacitor copy iOS (force + guards)
    script: |
      set -euo pipefail
      npx cap copy ios
      test -f ios/App/App/capacitor.config.json || { echo "ERROR: Missing ios/App/App/capacitor.config.json"; exit 1; }
      test -d ios/App/App/public || { echo "ERROR: Missing ios/App/App/public (web assets). Check Vite outDir and Capacitor webDir."; exit 1; }

  - name: Prepare App Icons (validate sizes and alpha; build asset catalog)
    script: |
      set -euo pipefail
      SRC_DIR="public/assets/brand/App_Icons/ios"
      APP1024="$SRC_DIR/AppStore1024.png"
      IPHONE180="$SRC_DIR/iPhoneApp180.png"
      SPOT120="$SRC_DIR/iPhoneSpotlight120.png"
      for f in "$APP1024" "$IPHONE180" "$SPOT120"; do
        [ -f "$f" ] || { echo "ERROR: $f not found."; exit 1; }
      done
      sips -g pixelHeight -g pixelWidth "$APP1024" | grep -q "pixelHeight: 1024" && sips -g pixelWidth "$APP1024" | grep -q "pixelWidth: 1024" || { echo "ERROR: AppStore1024.png must be 1024x1024."; exit 1; }
      sips -g pixelHeight -g pixelWidth "$IPHONE180" | grep -q "pixelHeight: 180" && sips -g pixelWidth "$IPHONE180" | grep -q "pixelWidth: 180" || { echo "ERROR: iPhoneApp180.png must be 180x180."; exit 1; }
      sips -g pixelHeight -g pixelWidth "$SPOT120" | grep -q "pixelHeight: 120" && sips -g pixelWidth "$SPOT120" | grep -q "pixelWidth: 120" || { echo "ERROR: iPhoneSpotlight120.png must be 120x120."; exit 1; }
      # Fail if alpha channel present (icons must be opaque)
      for f in "$APP1024" "$IPHONE180" "$SPOT120"; do
        if sips -g hasAlpha "$f" | grep -q "hasAlpha: yes"; then
          echo "ERROR: $f has transparency (alpha). Please provide opaque PNGs."
          exit 1
        fi
      done
      ICONSET="ios/App/App/Assets.xcassets/AppIcon.appiconset"
      mkdir -p "$ICONSET"
      cp "$APP1024" "$ICONSET/ios-marketing-1024.png"
      cp "$IPHONE180" "$ICONSET/iphone-60x60@3x.png"
      cp "$SPOT120" "$ICONSET/iphone-40x40@3x.png"
      cat > "$ICONSET/Contents.json" <<'JSON'
      {
        "images": [
          { "size": "60x60", "idiom": "iphone", "filename": "iphone-60x60@3x.png", "scale": "3x" },
          { "size": "40x40", "idiom": "iphone", "filename": "iphone-40x40@3x.png", "scale": "3x" },
          { "size": "1024x1024", "idiom": "ios-marketing", "filename": "ios-marketing-1024.png", "scale": "1x" }
        ],
        "info": { "version": 1, "author": "codemagic" }
      }
      JSON
      echo "AppIcon.appiconset prepared."

  - name: Xcode archive (Release)
    script: |
      set -euo pipefail
      xcodebuild -workspace "$XCODE_WORKSPACE" \
        -scheme "$XCODE_SCHEME" \
        -configuration Release \
        -sdk iphoneos \
        -destination "generic/platform=iOS" \
        -archivePath "$CM_BUILD_DIR/TradeLine247.xcarchive" \
        -allowProvisioningUpdates \
        clean archive

  - name: Export IPA for App Store (explicit profile)
    script: |
      set -euo pipefail
      cat > exportOptions.plist <<PLIST
      <?xml version="1.0" encoding="UTF-8"?>
      <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
      <plist version="1.0">
      <dict>
        <key>method</key><string>app-store</string>
        <key>teamID</key><string>${TEAM_ID}</string>
        <key>stripSwiftSymbols</key><true/>
        <key>compileBitcode</key><false/>
        <key>provisioningProfiles</key>
        <dict>
          <key>${BUNDLE_ID}</key><string>${PROFILE_NAME}</string>
        </dict>
      </dict>
      </plist>
      PLIST
      xcodebuild -exportArchive \
        -archivePath "$CM_BUILD_DIR/TradeLine247.xcarchive" \
        -exportOptionsPlist exportOptions.plist \
        -exportPath "$CM_BUILD_DIR/export"

artifacts:
  - $CM_BUILD_DIR/export/*.ipa
  - $CM_BUILD_DIR/TradeLine247.xcarchive

publishing:
  app_store_connect:
    auth: integration
    submit_to_testflight: true
